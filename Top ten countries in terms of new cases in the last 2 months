import csv
cols = 'iso_code,continent,location,date,total_cases,new_cases,total_deaths,new_deaths'.split(

    ',')

class Top_Ten(MRJob):
    def mapper(self, _, line):
        # Convert each line into a dictionary
        row = dict(zip(cols, [a.strip()
                              for a in csv.reader([line]).__next__()]))
        #select row greater by 01/08/2020(last 2 month) and take the required date and location based on date
        if row['date'] > "01\\08\\2020" and (row['new_cases'] and row['location']):
            yield row['location'], int(row['new_cases'])

    #combine the key and max(value)
    def combine_key(self, key, values):
        yield (key, max(values))

    def reducer_max(self, key, values):
        yield None, (int(max(values)), key)
    #append top ten max cases in secondlist
    def reducer_top_ten(self,_, values):
        self.firstlist = []
        for value in values:
            self.firstlist .append(value)
        self.secondlist = []
        for i in range(10):
            self.secondlist .append(max(self.firstlist))
            self.firstlist .remove(max(self.firstlist))
        for i in range(10):
            yield self.secondlist[i]

    def steps(self):
        return [
            MRStep(mapper=self.mapper,
                   combiner=self.combine_key,
                   reducer=self.reducer_max),
            MRStep(reducer=self.reducer_top_ten)
        ]


if __name__ == '__main__':
    Top_Ten.run()
