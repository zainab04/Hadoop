from mrjob.job import MRJob
from mrjob.step import MRStep
import csv
cols = 'iso_code,continent,location,date,total_cases,new_cases,total_deaths,new_deaths'.split(
    ',')

class CasesNDate(MRJob):
    def mapper(self, _, line):
        # Convert each line into a dictionary
        row = dict(zip(cols, [a.strip()
                              for a in csv.reader([line]).__next__()]))
        if row['date'] and row['new_deaths'] and row['location']:
            yield (row['date'], row['location']), int(row['new_cases'])

    #pair the values and key as one
    def reducer_cases_country(self, key, values):
        yield None, (max(values), key)

    #yield only one result
    def reducer_max_death_country(self, _, pairs):
        try:
            yield max(pairs)
        except ValueError:
            pass

    def steps(self):
        return [
            MRStep(mapper=self.mapper,
                    reducer=self.reducer_cases_country),
            MRStep(reducer=self.reducer_max_death_country)
            ]


if __name__ == '__main__':
    CasesNDate.run()

